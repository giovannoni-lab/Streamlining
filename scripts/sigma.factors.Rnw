\documentclass{article}
\usepackage{parskip} % puts a line between paragraphs and doesn't indent.
\usepackage{hyperref}
\usepackage{url}
\usepackage[superscript,nomove]{cite}
\begin{document}
\author{Ben Temperton}
\date{}
%this setup uses functions in .Rprofile from http://biostat.mc.vanderbilt.edu/wiki/Main/KnitrHowto#Plots
<<echo=FALSE>>==
suppressMessages(library(ape))
suppressMessages(library(plyr))
suppressMessages(library(xtable))
suppressMessages(library(ggplot2))
options(width=60, digits=3)
@
\title{Genome Streamlining and the loss of $\sigma$-factors}
\maketitle
\section{Introduction}
$\sigma$-factors are polypeptides that combine with DNA-dependent RNA polymerase (RNAP) to form an RNAP holoenzyme capable of transcribing the DNA template. The role of the $\sigma$-factor in the holoenzyme is two-fold: (i) RNAP is unable to initiate transcription without the $\sigma$-factor. (ii) The $\sigma$-subunit of the RNAP holoenzyme can recognize specific promotor sequences and can thus direct initiation of transcription to specific genes, orchestrating a metabolic and/or physiological response to changing environments\cite{FMR:FMR127}. 

$\sigma$-factors control a broad range of processes. Housekeeping $\sigma$-factors, such as $\sigma^{70}$ in \em{Escherichia coli} (encoded by \em{rpoD}) are responsible for the transcription of most genes expressed in exponentially growing cells and it is thought that at least one copy of a $\sigma^{70}$-like homolog can be found in all bacterial genomes. Other non-essential $\sigma$-factors include stationary phase $\sigma$-factors (RpoS); flagellar $\sigma$-factors ($\sigma^{28}$, WhiG); heat-shock $\sigma$-factors ($\sigma^{32}$, SigB/C); sporulation $\sigma$-factors; nitrogen utilization $\sigma$-factors ($\sigma^{54}$); and a broad range of extracytoplasmic function (ECF) $\sigma$-factors controlling expression of, among other things, alginate biosynthesis, iron uptake, antibiotic production and virulence factors.

Under genome streamlining theory, as niche complexity decreases, so too does the number of adaptive patahways required to occupy that niche. Because of the global nature of $\sigma$-regulation, loss of $\sigma$-factors as a result of genome streamlining may result from several mechanisms:
\begin{itemize}
  \item If one or more of the genes previously under $\sigma$-regulation become constitutive, the $\sigma$-factor must be maintained until such time as all regulated genes are either lost or made constitutive
  \item If all genes previously under  $\sigma$-regulation are no longer required in a niche of lower complexity, then selective pressure on all regulated genes, \emph{including the $\sigma$-factor} is relaxed, leading to a rapid loss of function and step-wise genome reduction.
\end{itemize}

Therefore, unlike e.g. loss of specific transporters, or virulence factors, a reduction of $\sigma$-factors in streamlined genomes would serve an indicator that entire pathways have either been lost or rendered constitutive. 

\section{Method}
\subsection{Identifying best representative SFam Hidden Markov models for $\sigma$-factors}
The number of $\sigma$-factor homologs in streamlined and non-streamlined bacterial genomes in the \href{https://img.jgi.doe.gov/cgi-bin/er/main.cgi}{IMG v400} database was evaluated as follows:

<<uniprot.taxa, tidy=TRUE>>=
uniprot<-read.delim('../data/uniprot.sigma.factors.tab')
@

A search for the keyword 'sigma factor' in \href{http://www.uniprot.org/uniprot/?query=keyword\%3AKW-0731&format=*}{Uniprot} resulted in 71,070 results, of which 255 had been reviewed. To restrict the search to bacterial $\sigma$-factors, 7 sequences from Caudovirales and  6 from \emph{Arabidopsis thaliana} were removed, leaving 242 $\sigma$-factor sequences from \Sexpr{length(unique(uniprot$Organism))} unique organisms:

%\begin{figure}
\includegraphics[width=0.9\textwidth]{../images/sig_factor_pie.png}
%\label{fig:uniprot.pie}
%\end{figure}

Each of the 242 $\sigma$-factor sequences was assigned a best-hit HMM model from Sifting Families\cite{Sharpton:2012kv}:

<<hmmsearch, tidy=TRUE>>=
system(paste('hmmsearch',  '-o uniprot.sigma.factor.vs.sfam.txt', '--tblout uniprot.sigma.factor.vs.sfam.tbl','--notextw', '-E 1e-5', '--cpu 8', 'sfam.hmm uniprot.sigma.factors.faa'))
@
Tabulate the output from HMMER space-separated format:
<<engine='python',eval=TRUE, tidy=TRUE>>=
outfile=open('../data/uniprot.sigma.factor.vs.sfam.formatted.tbl', 'w')
with open('../data/uniprot.sigma.factor.vs.sfam.tbl') as handle:
  for line in handle.readlines():
    if line.startswith('#'):
      continue
    bits = line.split()[0:17]
    outfile.write('%s\n'% '\t'.join(bits))
outfile.close()
@
Now let's pull out the best-hit SFams for each Uniprot reviewed $\sigma$-factor:
<<tidy=TRUE>>=
sfam.data<-read.delim('../data/uniprot.sigma.factor.vs.sfam.formatted.tbl', header=FALSE)
sfam.data<-sfam.data[c(1,3,5:10)]
colnames(sfam.data)<-c('target.name', 'query.name', 'full.e.value', 'full.score', 'full.bias', 'best.e.value', 'best.score', 'best.bias')
sfam.data.agg<-aggregate(full.score~target.name, sfam.data, max)
sfam.best.model <-merge(sfam.data.agg, sfam.data)
sfam.best.model$query.name<-as.character(sfam.best.model$query.name)
rm(sfam.data)
rm(sfam.data.agg)
@
From 242 reviewed Uniprot $\sigma$-factor sequences, we identified \Sexpr{length(unique(sfam.best.model$query.name))} different SFam HMMs.
\subsection{Validating the SFam HMMs for cross-function}
We need to do a sanity-check to make sure that the sequences used to construct each of the \Sexpr{length(unique(sfam.best.model$query.name))} SFam HMMs only include sequences either identified as $\sigma$-factors or hypothetical proteins. Each SFam consists of a phylogenetic tree with branch tips associated with a protein in IMG, as shown in Figure \ref{fig:example.tree}. We can find the COG annotation of each member of a tree with a bit of file parsing of the IMG v400 database:

First, we need to find out how many members are in ALL trees to create a dataframe:
<<tidy=TRUE>>=
N_size = 0
for(i in unique(sfam.best.model$query.name)){
  tree_name<-paste('../data/trees/', i, '.tree', sep='')
  MyTree <- read.tree(tree_name)
  tips<-MyTree$tip.label
  N_size<- N_size + length(MyTree$tip.label)
}
@

This gives us a total of \Sexpr{N_size} protein sequences from IMG v400. Now we can create a data.frame to hold the COG mappings, and write out the IMG ids for some python-esque parsing:

<<tidy=TRUE, eval=FALSE>>= %this needs to be evaluated to be fully runnable
img.reviewed.sfam.map<-data.frame(sfam.id=character(N_size), img.id=character(N_size), stringsAsFactors=FALSE)
row_count = 1
for(i in unique(sfam.best.model$query.name)){
  tree_name<-paste('../data/trees/', i, '.tree', sep='')
  MyTree <- read.tree(tree_name)
  tips<-MyTree$tip.label
  for (j in tips){
    img.reviewed.sfam.map[row_count, ]<-c(i, j)
    row_count<-row_count + 1
  }
}
write.table(img.reviewed.sfam.map$img.id, '../data/img.reviewed.sigma.ids', sep='\t', row.names=FALSE, quote=FALSE, col.names=FALSE)
@

For each IMG id, let's get the species and the annotation.
<<eval=FALSE, tidy=TRUE>>=
cat img.reviewed.sigma.ids | sed 's/^/lcl|/g' | blastdbcmd -entry_batch - -outfmt %t -db /ubique2/common/img_v400/img_v400_PROT | sed 's/\([0-9]\+\)\s\+\(.*\)\s\+\[\(.*\)\].*/\1\t\2\t\3/g' >> img.reviewed.sigma.anno
@
<<echo=FALSE>>=
img.reviewed.sigma.anno<-read.delim('../data/img.reviewed.sigma.anno', header=FALSE)
@
Out of \Sexpr{N_size} initial IMG ids, \Sexpr{N_size-nrow(img.reviewed.sigma.anno)} were not found in the IMG database. Now, we need to map the IMG species ID to each of the remaining $\sigma$-factor ids in ipython:
<<eval=FALSE, engine='python'>>=
ipython
ids = !cat img.reviewed.sigma.anno | cut -f 3
species_map = dict()
with open('00.taxon.tab.txt', 'rU') as handle:
  for l in handle.readlines():
    bits = l.split('\t')
    species_map[bits[2]] = '%s\t%s' % (bits[0], bits[3])
outfile = open('../data/img.reviewed.species.map', 'w')
outfile.write('img.species.id\timg.species.desc\timg.species.domain\n')

for i in ids:
  try:
    bits = species_map[i].split('\t')
    outfile.write('%s\t%s\t%s\n' % (bits[0], i, bits[1]))
  except KeyError:
    pass
outfile.close()
@
Now we can map the two together and prepare the file to identify COGs
<<tidy=TRUE, eval=FALSE>>=
img.reviewed.sigma.anno<-read.delim('../data/img.reviewed.sigma.anno', header=FALSE)
colnames(img.reviewed.sigma.anno)<-c('img.id','img.desc','img.species.desc')
img.reviewed.species.map<-read.delim('../data/img.reviewed.species.map')
tmp<-join(img.reviewed.sfam.map, img.reviewed.sigma.anno, by=c('img.id'))
tmp2<-join(tmp, img.reviewed.species.map, 'left', by='img.species.desc',match='first')

img.reviewed.sfam.map<-na.omit(tmp2)
write.table(img.reviewed.sfam.map, '../data/img.reviewed.sfam.map', sep='\t', row.names=FALSE, col.names=FALSE, quote=FALSE)
rm(tmp);rm(tmp2)
@
Now some more ipython magic to get the COG and the gene length of each $\sigma$-factor:
<<eval=FALSE, engine='python'>>=
ipython
import os
lines  = !cat ../data/img.reviewed.sfam.map
outfile = open('../data/img.reviewed.cog.map', 'w')
outfile.write('img.id\tcog.id\tgene.length\n')
for l in lines:
  l = l.strip()
  bits = l.split('\t')
	img_id = bits[2]
	img_species_id = bits[4]
	path_name_to_cog = 'img_v400/uncompressed_files/%s/%s.cog.tab.txt' % (img_species_id, img_species_id)
	cog_id = 'NA'
	gene_length='NA'
	if os.path.exists(path_name_to_cog):
    matching_line = !grep $img_id $path_name_to_cog
		if len(matching_line) > 0 and len(matching_line[0]) >0:
			matching_line = matching_line[0].strip()
			bits = matching_line.split('\t')
			cog_id = bits[9]
			gene_length=bits[1]
	outfile.write('%s\t%s\t%s\n' % (img_id, cog_id, gene_length))
outfile.close()
@
Finally, we can build the COG mapping:
<<tidy=TRUE, eval=FALSE>>=
img.reviewed.cog.map<-read.delim('../data/img.reviewed.cog.map')
img.reviewed.cog.map$img.id<-as.character(img.reviewed.cog.map$img.id)
tmp3<-join(img.reviewed.sfam.map, img.reviewed.cog.map, by=c('img.id'))
img.reviewed.sfam.map<-tmp3
rm(tmp3)
write.table(na.omit(img.reviewed.sfam.map), '../data/final.img.sigma.data.txt',sep='\t',row.names=FALSE, quote=FALSE)
@
<<echo=FALSE>>=
img.reviewed.sfam.map<-read.delim('../data/final.img.sigma.data.txt')
@
We now have \Sexpr{length(unique(img.reviewed.sfam.map$sfam.id))} which can be successfully mapped to \Sexpr{length(unique(img.reviewed.sfam.map$cog.id))} COG ids. If any SFam families have more than 1 COG associated with them, we want to manually check them out:

<<tidy=TRUE>>=
cog.count<-with(na.omit(img.reviewed.sfam.map), tapply(cog.id, sfam.id, function(x)length(unique(x))))
to.check<-cog.count[cog.count>1]
@

\Sexpr{nrow(to.check)} SFams contained more than 1 COG:
\begin{itemize}
  \item SFam\_14256 and SFam\_27359 contained both COG1595 and COG1191
  \item SFam\_3892 contained both COG1191 and COG0568
  \item SFam\_346494 contained COG1595,COG1191 and COG0568 
  \item SFam\_346925 also contained these COGs as well as COG1348 and COG4941
\end{itemize}  
The member of SFam\_346925 annotated as COG1348 was 'chlorophyllide reductase iron protein subunit X' from \emph{Chloroherpeton thalassium} ATCC 35110. This protein contains a $\sigma^{70}$-like domain identified by PFam family PF08281. Two sequences in SFam\_346925 were annotated as COG4941 - both classified as putative sigma factors by IMG. This SFam also contains \Sexpr{nrow(img.reviewed.sfam.map[img.reviewed.sfam.map$sfam.id=='346925', ])} sequences, of which the vast majority were COG1595:
<<echo=FALSE, results='asis'>>=
cogs<-summary(img.reviewed.sfam.map[img.reviewed.sfam.map$sfam.id=='346925', 'cog.id' ])
m<-matrix(cogs)
colnames(m)<-c('count')
rownames(m)<-names(cogs)
m<-t(m)
print(xtable(m, caption='COG members of SFam 346925'))
@

Therefore, it was decided that there was no evidence of cross-function in the \Sexpr{length(unique(img.reviewed.sfam.map$sfam.id))} identified SFams and that these SFams could successfully be used to identify $\sigma$-factors in IMG bacterial genomes without an abundance of false positives.

<<example.tree, fig.show='asis', fig.width=4, fig.cap='Example phylogenetic tree used to create SFam 18122', echo=FALSE, out.width="0.9\\textwidth">>=
plot.phylo(read.tree('../data/trees/18122.tree'), cex=0.7)
@


\subsection{Identifying sigma-factor homologs in bacterial genomes}
The \Sexpr{length(unique(img.reviewed.sfam.map$sfam.id))} SFam families identified above were extracted from the full SFam library:
<<tidy=TRUE, eval=FALSE>>=
write.table(unique(img.reviewed.sfam.map$sfam.id), '../data/reviewed.sigma.ids', quote=FALSE, col.names=FALSE, row.names=FALSE)
system(paste('hmmfetch', '-o reviewed.sigmas.hmm', '-f sfam.hmm', '../data/reviewed/sigma.ids'))
system(paste('hmmpress', 'reviewed.sigmas.hmm'))
@
Each predicted proteome of each bacterial species in IMG v400 was then searched against this new database (the commands for this can be found in '../data/sigma.hmm.cmds'). Each of the 4,470 HMMER output files created was parsed to count the total number of unique proteins identified as $\sigma$-factors in each bacterial species along with mean GC \%, total genome length and total number of proteins.
<<tidy=TRUE, eval=FALSE, engine='python'>>=
from Bio import SeqIO
from Bio.SeqUtils import GC
import glob
import os
import numpy as np
import sys, traceback
print 'img.species.id\tsigma.count\tgenome.length\tmean.gc\tprotein_count'
for file in glob.glob('sigma.tbl/*.tbl'):
  sigma_factors = set()
	gc_list = []
	mean_gc = 0
	genome_len = 0
	protein_count = 0 
	bacteria_id = os.path.basename(file).split('.')[0]
	with open(file, 'rU') as handle:
		for line in handle.readlines():
			if line.startswith('#'):
				continue
			bits = line.split()
			sigma_factors.add(bits[2])
	with open('img_v400/uncompressed_files/%s/%s.fna' % (bacteria_id, bacteria_id), 'rU') as handle:
		for seq_record in SeqIO.parse(handle, "fasta"):
			genome_len += len(seq_record.seq)
			gc_list.append(GC(seq_record.seq))
		mean_gc = np.mean(gc_list)
	with open('img_v400/uncompressed_files/%s/%s.genes.faa' % (bacteria_id, bacteria_id), 'rU') as handle:
		for seq_record in SeqIO.parse(handle, "fasta"):
			protein_count +=1

	print '%s\t%i\t%i\t%.4f\t%i' % (bacteria_id, len(sigma_factors), genome_len, mean_gc, protein_count)
@

\subsection{Identifying sigma-factor homologs in bacterial genomes using non-reviewed $\sigma$-factors}
<<tidy=TRUE>>=
no.review<-read.delim('../data/no.review.best.model.txt')
no.review.counts<-with(no.review, tapply(target_name, query_name, function(x)length(unique(x))))
reviewed<-as.character(unique(img.reviewed.sfam.map$sfam.id))
@

The above was repeating using the complete list of \Sexpr{sum(no.review.counts)} non-reviewed $\sigma$-factor sequences in Uniprot to see if it was feasible to increase the number of SFams associated with $\sigma$-factors, without including an excess of false positives. This extended search list recruited \Sexpr{nrow(no.review.counts)} best-hit SFams. Of the \Sexpr{sum(no.review.counts)} non-reviewed $\sigma$-factors, \Sexpr{sum(no.review.counts[reviewed], na.rm=TRUE)} (\Sexpr{100*sum(no.review.counts[reviewed], na.rm=TRUE)/sum(no.review.counts)}\%) were accounted for by the \Sexpr{nrow(reviewed)} SFams captured from reviewed sequences. Verification of other SFams for non-reviewed $\sigma$-factors showed considerable heterogeneity of annotation. Therefore, it was decided to use only SFams identified by reviewed Uniprot $\sigma$-sequences for the purpose of annotating the $\sigma$-factors in bacterial genomes.

\subsection{Data clean-up}
Data provided by the annotation of IMG v400 bacterial genomes using the \Sexpr{nrow(reviewed)} SFams from reviewed Uniprot $\sigma$-factor sequences was cleaned as follows:
\begin{itemize}
\item Bacterial species with genomes < 0.1 Mbp were removed, as these were smaller than the smallest known genomes of highly-streamlined symbionts\cite{McCutcheon:2012jm}
\item Bacterial species with genomes > 15 Mbp were removed (typically metagenomes)
\item Species with fewer than 10 proteins were removed
\item The genome of \emph{Clostridium carboxidivorans} P7 was removed as it has a genome size of 5.4 Mbp, but allegedly contains 22,373 genes (most of which are small hypothetical proteins)
\item There are two versions of HTCC2255 in the IMG v400 database, one of which contains contaminants. The genome containing contaminants was removed.
\end{itemize}

<<sigma.count.filter, tidy=TRUE>>=
library(ggplot2)
count.data<-read.delim('../data/sigma.counts')
genome.size.filtered<-subset(count.data, genome.length<1.5e7&genome.length>1e5)
protein.size.filtered<-subset(genome.size.filtered, protein_count>10)
protein.size.filtered<-subset(protein.size.filtered, protein_count<20000)
protein.size.filtered<-subset(protein.size.filtered, img.species.id != 2517572075)
@
After clean-up, \Sexpr{nrow(protein.size.filtered)} species remained. Plotting number of proteins vs. genome size of this remaining data shows a well-established linear relationship (Figure \ref{fig:protein.vs.genome.size}).
<<protein.vs.genome.size, echo=FALSE, fig.cap='Number of proteins as a function of genome size for IMG v400 bacterial genomes', fig.show='asis', out.width="0.9\\textwidth">>=
protein.linear.model<-lm(protein_count~genome.length, data=protein.size.filtered)

ggplot(data=protein.size.filtered, aes(genome.length, protein_count)) +
  theme_bw() + 
  geom_point() +
  geom_smooth(method='lm') +
  labs(x='Genome Length (bp)', y='Number of proteins')
@
It is clear from Figure \ref{fig:protein.vs.genome.size} that some bacterial genomes in IMG v400 contain far more or far fewer proteins than can be expected from their genome size. It was decided to exclude these taxa from the $\sigma$-factor analysis to avoid any potential impact of mis-calling of proteins on the number of identified $\sigma$-factors. Therefore, bacterial genomes were excluded whose protein counts were outside 2 standard deviations of the regression line in Figure \ref{fig:protein.vs.genome.size}:
<<exclude.by.2sd>>=
min.rsd<- -(2*sd(protein.linear.model$residuals))
max.rsd<- 2*sd(protein.linear.model$residuals)
protein.size.filtered$include<-protein.linear.model$residuals>min.rsd&protein.linear.model$residuals<max.rsd
final.filtered<-subset(protein.size.filtered, include==TRUE)
@

Analysis of the number of $\sigma$-factors in the remaining \Sexpr{nrow(final.filtered)} genomes was then performed.

\section{Results}
The relationship between the number of $\sigma$-factors and genome length is shown in Figure \ref{fig:sigma.vs.genome.size}.
<<sigma.vs.genome.size, fig.cap='Number of sigma factors vs. genome size in IMG bacterial genomes', fig.show='asis', echo=FALSE, out.width="0.9\\textwidth">>=
final.filtered$type<-'Other'
final.filtered$SAG<-FALSE
final.filtered$streamlined<-FALSE
sar.11.ids<-scan('../data/sar11.ids')
prochlorococcus.ids<-scan('../data/prochlorococcus.ids')
symbiont.ids<-scan('../data/symbiont.ids')
roseobacter.ids<-scan('../data/roseobacter.ids')
vibrio.ids<-scan('../data/vibrio.ids')
alteromonas.ids<-scan('../data/alteromonas.ids')
htcc2255.id<-c(639857003)
bacteroidetes.ids<-scan('../data/bacteroidetes.ids')
verrucomicrobia.ids<-scan('../data/verrucomicrobia.ids')
final.filtered[final.filtered$img.species.id %in% sar.11.ids, ]$type<-'SAR11'
final.filtered[final.filtered$img.species.id %in% prochlorococcus.ids, ]$type<-'Prochlorococcus'
final.filtered[final.filtered$img.species.id %in% htcc2255.id, ]$type<-'Rhodobacteraceae'
final.filtered[final.filtered$img.species.id %in% symbiont.ids, ]$type<-'Symbiont'
final.filtered[final.filtered$img.species.id %in% roseobacter.ids, ]$type<-'Rhodobacteraceae'
final.filtered[final.filtered$img.species.id %in% vibrio.ids, ]$type<-'Vibrionaceae'
final.filtered[final.filtered$img.species.id %in% alteromonas.ids, ]$type<-'Alteromonadaceae'
final.filtered[final.filtered$img.species.id %in% bacteroidetes.ids, ]$type<-'Bacteroidetes'
final.filtered[final.filtered$img.species.id %in% verrucomicrobia.ids, ]$type<-'Verrucomicrobia'

streamlined.ids<-c(sar.11.ids, prochlorococcus.ids, htcc2255.id, symbiont.ids)
final.filtered[final.filtered$img.species.id %in% streamlined.ids, ]$streamlined<-TRUE
final.streamlined<-subset(final.filtered, streamlined==TRUE)
background<-subset(final.filtered, type=='Other'&streamlined==FALSE)
named.types<-c('Rhodobacteraceae', 'Vibrionaceae', 'Alteromonadaceae', 'Bacteroidetes', 'Verrucomicrobia')
named.non.streamlined<-subset(final.filtered, streamlined==FALSE & type %in% named.types)
qpois.model<-glm(sigma.count~genome.length, data=final.filtered, quasipoisson)
library(MASS)
nb.model<-glm.nb(sigma.count~genome.length, data=final.filtered, link='log')
predicted.data<-data.frame(genome.length=round(seq.int(from=0, to=1e7, length.out=length(background$genome.length))))
G<-predict(nb.model, newdata=predicted.data, type='link', se=TRUE)
predicted.data$fit<-exp(G$fit)
predicted.data$upper<-exp(G$fit + 1.96 * G$se.fit)
predicted.data$lower<-exp(G$fit - 1.96 * G$se.fit)
model.colour="#009E73"
p<-ggplot(data=background, aes(genome.length, sigma.count)) +
  theme_bw(base_size = 16) +
  geom_point(col='gray') + 
  geom_point(data=final.streamlined, aes(genome.length, sigma.count, color=type, shape='2')) +
  geom_point(data=named.non.streamlined, aes(genome.length, sigma.count, color=type, shape='1')) +
  geom_ribbon(aes(predicted.data$genome.length, ymin=predicted.data$lower, ymax=predicted.data$upper), alpha=0.4, colour=model.colour, fill=model.colour) +
  geom_line(aes(predicted.data$genome.length, predicted.data$fit), size=1, color=model.colour) +
  labs(x='Genome Length (bp)', y=expression(paste('Number of ', sigma,  '-factor homologs', sep='')))
print(p)
@

Fitting a Poisson model to the data showed evidence of overdispersion ($\phi=5.50$), therefore a negative-binomial model with a log-link was fitted. The explained deviance (glm equivalent of $r^{2}$) of the negative binomial model was \Sexpr{100*((nb.model$null.deviance-nb.model$deviance)/nb.model$null.deviance)} \%. The model predicts a minimum of \Sexpr{nb.model$coefficients[1]} $\sigma$-factors per genome. 

\subsection{Evaluating the genomes from Swan et al\cite{Swan:2013ci}}
From a total of 56 single amplified genomes (SAGs) from  marine surface water, 41 recovered genomes were >0.75Mbp in size and >30\% complete.
<<swan.data>>=
swan<-read.delim('../data/swan.sigma.counts')
swan$include<-TRUE
for.display<-rbind(final.filtered, swan)

@
<<final.sigma.vs.genome.size, fig.cap='Number of sigma factors vs. genome size in IMG bacterial genomes', fig.show='asis', echo=FALSE, out.width="0.9\\textwidth">>=
  
display.streamlined<-subset(for.display, streamlined==TRUE)
display.named.non.streamlined<-subset(for.display, streamlined==FALSE & type %in% named.types)
p<-ggplot(data=background, aes(genome.length, sigma.count)) +
  theme_bw(base_size = 16) +
  geom_point(col='gray', alpha=0.3) + 
  geom_point(data=display.streamlined, aes(genome.length, sigma.count, color=type, shape=SAG, size=4)) +
  geom_point(data=display.named.non.streamlined, aes(genome.length, sigma.count, color=type, shape=SAG)) +
  geom_ribbon(aes(predicted.data$genome.length, ymin=predicted.data$lower, ymax=predicted.data$upper), alpha=0.4, colour=model.colour, fill=model.colour) +
  geom_line(aes(predicted.data$genome.length, predicted.data$fit), size=1, color=model.colour) +
  labs(x='Genome Length (bp)', y=expression(paste('Number of ', sigma,  '-factor homologs', sep=''))) +
  xlim(0, 4.5e6) + 
  ylim(0, 40) + 
  scale_shape(solid=FALSE)
print(p)
@


\section{Conclusion}


\bibliography{sigma.factors.bib}
\bibliographystyle{unsrt}
\end{document}